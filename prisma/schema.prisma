// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?   @unique
  email     String?   @unique
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  Session   Session[]

  @@map(name: "users")
}

model Mouse {
  id        String   @id @default(cuid()) // create cuid if no id is provided
  createdAt DateTime @default(now()) @map(name: "created_at") // set automatically
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at") // set automatically

  pyratId  String
  chipId   Int
  gender   String
  deceased Boolean @default(false)
  genoType String?
  Group    Group?  @relation(fields: [groupId], references: [id])
  groupId  String?
  Run      Run[]
}

model Group {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  number  Int
  members Mouse[]
}

model Recording {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  right_stair_0 Int
  right_stair_1 Int
  right_stair_2 Int
  right_stair_3 Int
  right_stair_4 Int
  right_stair_5 Int
  right_stair_6 Int
  right_stair_7 Int
  right_stair_8 Int

  left_stair_0 Int
  left_stair_1 Int
  left_stair_2 Int
  left_stair_3 Int
  left_stair_4 Int
  left_stair_5 Int
  left_stair_6 Int
  left_stair_7 Int
  left_stair_8 Int

  Run Run[]
}

model Run {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  mouse   Mouse  @relation(fields: [mouseId], references: [id])
  mouseId String

  run       Recording @relation(fields: [runId], references: [id])
  runId     String
  Session   Session?  @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  runs         Run[]
  Experiment   Experiment? @relation(fields: [experimentId], references: [id])
  experimentId String?
}

model Experiment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  sessions Session[]
}
