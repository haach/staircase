// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  Session          Session[]
  accounts         Account[]
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map(name: "updated_at")
  RecordingSession RecordingSession[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mouse {
  id        String   @id @default(cuid()) // create cuid if no id is provided
  createdAt DateTime @default(now()) @map(name: "created_at") // set automatically
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at") // set automatically

  pyratId     String    @map(name: "pyrat_id")
  mouseNumber Int       @default(0) @map(name: "mouse_number")
  chipNumber  Int       @default(0) @map(name: "chip_number")
  gender      String
  deceasedAt  DateTime? @map(name: "deceasedd_at")

  genoType String?

  Group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?
  Run     Run[]
}

model Group {
  id        String   @id @default(cuid()) // create cuid if no id is provided
  createdAt DateTime @default(now()) @map(name: "created_at") // set automatically
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at") // set automatically

  groupNumber Int     @default(0) @map(name: "group_number")
  mice        Mouse[]

  Experiment   Experiment? @relation(fields: [experimentId], references: [id])
  experimentId String?
}

model Run {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  right Int[] @default([0, 0, 0, 0, 0, 0, 0, 0, 0])
  left  Int[] @default([0, 0, 0, 0, 0, 0, 0, 0, 0])

  Mouse   Mouse?  @relation(fields: [mouseId], references: [id])
  mouseId String?

  RecordingSession   RecordingSession? @relation(fields: [recordingSessionId], references: [id])
  recordingSessionId String?
}

model RecordingSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map(name: "author_id")

  runs         Run[]
  Experiment   Experiment? @relation(fields: [experimentId], references: [id])
  experimentId String?     @map(name: "experiment_id")
}

model Experiment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  name      String
  displayId String
  closedAt  DateTime? @map(name: "closed_at")

  recordingSessions RecordingSession[]
  groups            Group[]
}
